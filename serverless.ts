import type { AWS } from '@serverless/typescript';

import functions from './serverless/functions'
import dynamoResource from './serverless/dynamoResource'

const serverlessConfiguration: AWS = {
  service: 'orders-warranty-renewal',
  frameworkVersion: '3',
  plugins: ['serverless-esbuild'],
  provider: {
    name: 'aws',
    runtime: 'nodejs14.x',
    profile: 'nautti_serverless_dell_user',             // AWS user in credentials file, if left default is used
    region: 'us-east-1',                                // Default region (if not mentioned explicitly)

    /**
     * Allowing lambda to do anything with Dynamo resource
     * https://www.serverless.com/framework/docs/tutorial#setting-function-permissions
     */
    iam: {
      role: {
        statements: [
          {
            Effect: "Allow",
            Action: "dynamodb:*",
            
            /**
             * ARN for dynamodb resource 'arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.orderTable}'
             * Refer AWS Account ID and region in serverless: https://stackoverflow.com/a/68311298
             * DynamoDB ARNs: https://iam.cloudonaut.io/reference/dynamodb.html
             */
            Resource:
            {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  "aws:",
                  "dynamodb:${aws:region}:${aws:accountId}:",
                  "table/${self:custom.orderTable}",
                ]
              ]
            }
          },
        ]
      }
    },
    apiGateway: {
      minimumCompressionSize: 1024,
      shouldStartNameWithService: true,
    },

    // Export serverless envs to .env file via plugin: https://www.serverless.com/plugins/serverless-export-env
    environment: {
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1',
      NODE_OPTIONS: '--enable-source-maps --stack-trace-limit=1000',
      
      /**
       * Defining custom variables
       * https://www.serverless.com/framework/docs/tutorial#making-the-database-table-name-available-to-the-function
       */
      orderTable: '${self:custom.orderTable}',        // Defining name of table in env variable

      /**
       * REST API URL generated by AWS in API Gateway
       * AWS docs: https://docs.aws.amazon.com/apigateway/latest/developerguide/create-api-resources-methods.html
       * Serverless docs: https://www.serverless.com/framework/docs/providers/aws/events/http-api#custom-domains
       */
      baseUrl: {                                      // We don't want hardcoded URL, so we will get the code generated by API Gateway and join it
        "Fn::Join": [                                 // https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-join.html
          '',                                         // Seperator used in joining, we don't need anything in between the string
          [
            'https://',

            /**
             * Ref returns the value of specified parameter
             * https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ref.html
             */
            { Ref: 'HttpApi' },                       // ID of API referred
            '.execute-api.${self:provider.region}.amazonaws.com',
          ]
        ]
      }
    },
  },

  // import the function via paths
  functions,

  // Add custom resources
  resources: {
    Resources: {
      ...dynamoResource,
    }
  },
  package: { individually: true },
  custom: {
    // Defining our custom variable for table name, <sls-stage> variable will allow us to define type of env like dev or prod
    orderTable: '${sls:stage}-order-table',
    esbuild: {
      bundle: true,
      minify: false,
      sourcemap: true,
      exclude: ['aws-sdk'],
      target: 'node14',
      define: { 'require.resolve': undefined },
      platform: 'node',
      concurrency: 10,
    },
  },
};

module.exports = serverlessConfiguration;
